---
title: InteractiveTable
description: Grafana Labs Interactive Table component
keywords: ['Grafana', 'Labs', 'link', 'component']
hide_title: true
---

import { TextLink, Badge, Icon } from '@grafana/ui';

# Interactive Table <Badge text='ready' color='green'></Badge> <a href='https://developers.grafana.com/ui/canary/index.html?path=/docs/general-textlink--docs' target='_blank' className='header-links'>Storybook <Icon name="external-link-alt"/> </a>

The table is used to display and select data efficiently. The table component allows for the display and modification of detailed information.   With additional functionality it allows for batch editing, as needed by your feature’s users.

<iframe
  src="https://developers.grafana.com/ui/latest/index.html?path=/story/experimental-interactivetable--basic"
  width="100%"
  height="300px"
></iframe>

## Usage

### When to use
- To redirect the user to another page, external or internal.<br/>
- When redirecting the user through a link in a word or phrase within a paragraph. <br/>
- When redirecting the user through a link in a word or phrase, not within a paragraph but surrounded by other blocks of text.<br/>

### When not to use
- When its purpose is to trigger an action, please use a Button or IconButton component.<br/>
- When it still redirects the user but it should have the same appearance as a button, please use the LinkButton component.<br/>
- When the link is just comprised by an icon use IconButton component.<br/>

### Do’s
- Use the table for Admin User Persona(TBD) centric workflows <br/>
- Use the table for batch selection AND manipulation/editing of multiple rows of data<br/>
- Pagination works best where users are looking for specific pieces of content. Infinite scroll is better suited for the exploration of content.<br/>
- Use Infinite Scroll when the primary workflow is exploration.<br/>
- Perform use case analysis on what information needs to be in the primary table and what information can be pushed to the Expanded section to declutter the overall UI<br/>


### Don’ts
- Do not use the Admin Table in Dashboards or Panels<br/>
- Avoid using the table where mobile or responsiveness may be a requirement.  Consider an alternative pattern where the user is presented with a summary list and can click/tap to an individual page for each row in that list.<br/>
- Duplicate batch editing controls in the Expanded Row section.<br/>



## Considerations
The Interactive Table component supports workflows where the user needs to manipulate potentially large datasets.  In its simplest form it allows for batch selection of existing data for further processing within a larger workflow.  Its capabilities can be expanded to enable dataset creation as well as batch editing.

The table will typically be complimented by a section above to support either read-only & editing workflows.  Read-only tables will usually have a summary of specific properties or calculated attributes of the dataset.  Depending on the feature under design there may be import/export options. For editing workflows the user will add new rows to the table below. There will also be batch edit options for existing rows in the header section.

Individual rows can be expanded to display additional details or reconfigure properties previously defined when the row was created.  In the case of editing a row, the UI presented should be a duplicate of the header section above the table used to create the row.  In the case where a property can no longer be edited it should still be displayed but disabled/greyed out.  The expanded row area should be used to declutter the primary presentation of data, carefully consider what the user needs to know at first glance and what can be hidden behind the Row Expander button.  In general, data-types that are consistent across all dataset are in the primary table, variances are pushed to the expanded section for each individual row.

It is important to understand and define these as requirements for the feature under design as the Admin Table is not responsive and will not provide good UX on small or touch screens.

## Types

Within Grafana, there are two different types of _text links_, inline or standalone, whether they are wrapped by text or being a standalone element. 

| Types               | Purpose                                                |
| ------------------- | ------------------------------------------------------ |
| **Inline**          | It is part of a broader text. It will be surrounded by text, before, after or in both directions. Although it can show an icon at its end, we advise not to do that |
| **Standalone**      | It is a block not surrounded immediately by more text |


### Subtypes
Both inline or standalone _text links_ will redirect the user to a specific page, therefore, depending on this they can be internal or external.

| Subtypes            | Purpose                                                |
| ------------------- | ------------------------------------------------------ |
| **Internal**        | Redirect the user to a page inside Grafana |
| **External**        | Redirect the user to a page outside Grafana. The page will open a new window as we use `target="_blank"` and `rel="noreferrer"` to ensure that it is a safe [cross-origin destination](https://developer.chrome.com/docs/lighthouse/best-practices/external-anchors-use-rel-noopener/) link. By default, an external _text link_ will show the `external-link-alt` icon |



## Formatting
### Anatomy
- Text: its content gives info about where the user is going to be directed
- Icon: it gives context about what the destination is. For example, by default, an external link will show the ‘external-link-alt’ icon. If the link leads to another part of the same page, the icon could be ‘anchor’.

## Placement
- Inline: (default) The inline text link will follow the alignment of the text wrapping it up.
- Standalone: This type of text link requires a parent element / container in which to set the appropriate display value.


## Behaviour
The following is the default behaviour and so, it will be applied according to its type.
1. Inline: 
Blue and underlined at first. Through the color prop the user will be able to change this value, but the rest will be kept. 
On hover: blue and not underlined
	
2. Standalone:
Blue and not underlined at first
On hover: blue and underlined

Example: 
<iframe
  src="https://developers.grafana.com/ui/canary/index.html?path=/story/general-textlink--basic&args=weight:!undefined;color:primary&full=1&shortcuts=false&singleStory=true"
  width="100%"
  height="300px"
></iframe>

In this example, the user has set the color value to 'primary', so in dark theme will be 'white' and not underlined at first while blue and underlined when onhover, as it inherits from the standalone default behaviour.

## Spacing
- Between text and icon: the gap is set to 0.5em, so it will adapt itself to the change of the font size
- The text itself: there is no margin or padding applied
- Between the block text and the text link the space is not modified, so will be the same as the existing between the words of the paragraph.


## Accessibility
- The text that contains the link should be informative 
- The aria-describedby attribute can be used to provide extra text for a screen reader besides the link text. 
- Assistive technology may consider an ARIA label to replace the link text, so if there is a need for more context please use aria-describedby.


## Related
- [Button](https://developers.grafana.com/ui/latest/index.html?path=/story/buttons-button--basic)
- [LinkButton](https://developers.grafana.com/ui/latest/index.html?path=/docs/buttons-button--basic)
- [IconButton](https://developers.grafana.com/ui/latest/index.html?path=/story/buttons-iconbutton--basic)

## Further Reading & Sources
- [Writers Toolkit: Write useful link text](https://grafana.com/docs/writers-toolkit/writing-guide/useful-link-text/)
- [Accessibility: WCAG | Link purpose in content](https://www.w3.org/WAI/WCAG21/Understanding/link-purpose-in-context.html)
