"use strict";(self.webpackChunksaga=self.webpackChunksaga||[]).push([[14],{2106:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var n=i(7462),a=i(3366),s=(i(7294),i(3905)),r=i(1476),o=["components"],l={title:"Accessibility",description:"Description for search engines and results",keywords:["keywords","for","search","engines"],hide_title:!0},c="Accessibility <Badge text='ready' color='green'></Badge>",p={unversionedId:"Foundations/accessibility",id:"Foundations/accessibility",title:"Accessibility",description:"Description for search engines and results",source:"@site/docs/03-Foundations/accessibility.mdx",sourceDirName:"03-Foundations",slug:"/Foundations/accessibility",permalink:"/design-system/Foundations/accessibility",draft:!1,editUrl:"https://github.com/grafana/design-system/blob/main/docs/03-Foundations/accessibility.mdx",tags:[],version:"current",frontMatter:{title:"Accessibility",description:"Description for search engines and results",keywords:["keywords","for","search","engines"],hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/design-system/contributing"},next:{title:"Design Principles",permalink:"/design-system/Foundations/design-principles"}},d={},m=[{value:"Grafana/UI components",id:"grafanaui-components",level:3},{value:"Form elements",id:"form-elements",level:4},{value:"Writing tests with accessibility in mind",id:"writing-tests-with-accessibility-in-mind",level:3},{value:"Pull requests that introduce accessibility(a11y) errors:",id:"pull-requests-that-introduce-accessibilitya11y-errors",level:3}],h={toc:m},u="wrapper";function b(e){var t=e.components,i=(0,a.Z)(e,o);return(0,s.kt)(u,(0,n.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"accessibility-"},"Accessibility ",(0,s.kt)(r.C,{text:"ready",color:"green",mdxType:"Badge"})),(0,s.kt)("p",null,"At Grafana we pay special attention to accessibility and that's why it's important that all components are written with it in\nmind."),(0,s.kt)("p",null,"The goal of this document is to list best practices and recommendations when it comes to writing accessible components."),(0,s.kt)("h3",{id:"grafanaui-components"},"Grafana/UI components"),(0,s.kt)("p",null,"Some grafana/ui components have specific mechanisms built-in that make it easier to write accessible components."),(0,s.kt)("h4",{id:"form-elements"},"Form elements"),(0,s.kt)("p",null,"One of the important accessibility considerations when working with form elements is to make sure form controls are\nproperly labelled. For that a ",(0,s.kt)("inlineCode",{parentName:"p"},"label")," element has to be associated with the respective form control. One way to\ndo that is to provide ",(0,s.kt)("inlineCode",{parentName:"p"},"for")," attribute to the label that matches the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," attribute of the form control."),(0,s.kt)("p",null,"The form components from grafana/ui provide an easier way to achieve that. The form elements, used inside ",(0,s.kt)("inlineCode",{parentName:"p"},"Field"),"\ncomponents, will get the ",(0,s.kt)("inlineCode",{parentName:"p"},"label")," properly associated with them given that the element has ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," (in case of ",(0,s.kt)("inlineCode",{parentName:"p"},"Select")," the prop is ",(0,s.kt)("inlineCode",{parentName:"p"},"inputId"),") specified."),(0,s.kt)("p",null,"As an example, this code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'<Field label="Name">\n  <Input id="name" placeholder="Enter a name" />\n</Field>\n')),(0,s.kt)("p",null,"will be rendered as (simplified)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-html"},'<div>\n  <label for="name"> Name </label>\n  <input name="name" type="text" id="name" placeholder="Enter a name" value="" />\n</div>\n')),(0,s.kt)("p",null,"As long as the form element has a unique ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," attribute specified, it will be automatically accessible when rendered."),(0,s.kt)("h3",{id:"writing-tests-with-accessibility-in-mind"},"Writing tests with accessibility in mind"),(0,s.kt)("p",null,"We use ",(0,s.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/react-testing-library/intro"},"React Testing Library")," (RTL) for writing unit tests.\nThe library is built with accessibility in mind and makes it easier to ensure the written code is accessible to all users.\nWhen querying DOM elements with RTL prefer using ",(0,s.kt)("inlineCode",{parentName:"p"},"*ByRole")," queries as they resemble closely how the users interact\nwith the page - both using mouse/visual display and assistive technologies.\nAs a rule of thumb, if code is written with the accessibility concerns in\nmind, ",(0,s.kt)("inlineCode",{parentName:"p"},"*ByRole")," queries will be sufficient in most of the cases. There are certainly exceptions here, as not all the elements have defined ",(0,s.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/html-aria/#docconformance"},"ARIA role"),"."),(0,s.kt)("p",null,"As an example, for this code"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'<Field label="Username">\n  <Input id="username" placeholder="Enter a name" value={\'Test\'} />\n</Field>\n')),(0,s.kt)("p",null,"the test case could be as follows"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"it('has username set', () => {\n  expect(screen.getByRole('textbox', { name: 'Username' })).toHaveValue('Test');\n});\n")),(0,s.kt)("p",null,"Input with type ",(0,s.kt)("inlineCode",{parentName:"p"},"text")," (default type value) has a role of ",(0,s.kt)("inlineCode",{parentName:"p"},"textbox")," and the ",(0,s.kt)("inlineCode",{parentName:"p"},"name")," option is not the name attribute\ngiven to the input elements but their ",(0,s.kt)("a",{parentName:"p",href:"https://www.tpgi.com/what-is-an-accessible-name/"},"accessible name"),", which in this case is the text content of the associated with input label."),(0,s.kt)("h3",{id:"pull-requests-that-introduce-accessibilitya11y-errors"},"Pull requests that introduce accessibility(a11y) errors:"),(0,s.kt)("p",null,"We use ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/pa11y/pa11y-ci"},"pa11y-ci")," to collect accessibility errors on ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/grafana/grafana/issues/36555"},"some URLs in the project"),", threshold errors are specified per URL."),(0,s.kt)("p",null,"If the contribution introduces new a11y errors, our continuous integration will fail, preventing you to merge to the main branch. In those cases there are two alternatives for moving forward:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Check the error log on the pipeline step ",(0,s.kt)("inlineCode",{parentName:"li"},"test-a11y-frontend-pr"),", identify what was the error, and fix it."),(0,s.kt)("li",{parentName:"ul"},"Locally run the command ",(0,s.kt)("inlineCode",{parentName:"li"},"yarn test:accessibility-report")," that generates an HTML accessibility report, then go to the URL that contains your change, identify the error, and fix it. Keep in mind, a local e2e Grafana instance is going to be running on ",(0,s.kt)("inlineCode",{parentName:"li"},"http://localhost:3001"),".")),(0,s.kt)("p",null,"You can also prevent introducing a11y errors by installing an a11y plugin in your browser, for example, axe DevTools, Accessibility Insights for Web among others."))}b.isMDXComponent=!0}}]);